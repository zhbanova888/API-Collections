{
	"info": {
		"_postman_id": "2b229b9f-258b-4500-ae36-f25d8225754c",
		"name": "New California_Marketing_Original Rand",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "27790957"
	},
	"item": [
		{
			"name": "Added new address",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"pm.environment.clear();",
							"// pm.environment.unset(\"ID\");",
							"// pm.environment.unset(\"company\");",
							"// pm.environment.unset(\"zipCode\");",
							"// pm.environment.unset(\"addressLine1\");",
							"// pm.environment.unset(\"addressLine2\");",
							"// pm.environment.unset(\"firstName\");",
							"// pm.environment.unset(\"lastName\");",
							"// pm.environment.unset(\"city\");",
							"// pm.environment.unset(\"country\");",
							"// pm.environment.unset(\"phoneNumber\");",
							"// pm.environment.unset(\"subdivision\");",
							"//returns a random integer from 10000 to 90000 with 5 digits",
							"pm.environment.set(\"zipCode\", Math.floor(Math.random()*90000) + 10000);",
							"//returns a random integer from 100 to 900 with 3 digits",
							"pm.environment.set(\"addressLine2\", Math.floor(Math.random()*900) + 100);",
							"const stateAbbreviations = [",
							" 'AL','AK','AS','AZ','AR','CA','CO','CT','DE','DC','FM','FL','GA',",
							" 'GU','HI','ID','IL','IN','IA','KS','KY','LA','ME','MH','MD','MA',",
							" 'MI','MN','MS','MO','MT','NE','NV','NH','NJ','NM','NY','NC','ND',",
							" 'MP','OH','OK','OR','PW','PA','PR','RI','SC','SD','TN','TX','UT',",
							" 'VT','VI','VA','WA','WV','WI','WY'",
							"];",
							"const randomState = stateAbbreviations[Math.floor(Math.random() * stateAbbreviations.length)];",
							"pm.environment.set(\"subdivision\", randomState);",
							"// Using Faker lib https://learning.postman.com/docs/writing-scripts/script-references/variables-list/",
							"let fName = pm.variables.replaceIn('{{$randomFirstName}}')",
							"pm.environment.set(\"firstName\", fName);",
							"let lName = pm.variables.replaceIn('{{$randomLastName}}')",
							"pm.environment.set(\"lastName\", lName);",
							"let co = pm.variables.replaceIn('{{$randomCompanyName}}')",
							"pm.environment.set(\"company\", co);",
							"let addrLn1 = pm.variables.replaceIn('{{$randomStreetAddress}}')",
							"pm.environment.set(\"addressLine1\", addrLn1);",
							"let cty = pm.variables.replaceIn('{{$randomCity}}')",
							"pm.environment.set(\"city\", cty);",
							"let cntry = pm.variables.replaceIn('{{$randomCountry}}')",
							"pm.environment.set(\"country\", cntry);",
							"let phoneNum = pm.variables.replaceIn('{{$randomPhoneNumber}}')",
							"pm.environment.set(\"phoneNumber\", phoneNum);"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"if(responseCode.code === 200) {",
							"    tests[\"Backend is available, response code is 200\"] = true;",
							"} else if (responseCode.code === 401) {",
							"    tests[\"Not authorised, check access token or Log in\"] = false;",
							"} else if (responseCode.code === 403) {",
							"    tests[\"Forbiden\"] = false;",
							"} else if (responseCode.code === 404) {",
							"    tests[\"Not Found. Check if you made correct request\"] = false;",
							"} else if (responseCode.code === 422) {",
							"    tests[\"he instance is not valid\"] = false;",
							"} else {",
							"    tests[\"Something went wrong. Check response body\"] = false;",
							"}",
							"",
							"",
							"switch (responseCode.code) {",
							"    case 200:",
							"        tests[\"200 ok. The request has succeeded\"] = true;",
							"        break;",
							"    case 404:",
							"        tests[\"404 Not found\"] = false;",
							"        break;",
							"    case 400:",
							"        tests[\"400 Bad Request\"] = false;",
							"        break;",
							"    case 401:",
							"        tests[\"401 BUnauthorized\"] = false;",
							"        break;",
							"    case 500:",
							"        tests[\"500 Internal Server Error\"] = false;",
							"        break;",
							"    case 503:",
							"        tests[\"503 Server unavailable\"] = false;",
							"        break;",
							"    case 502:",
							"        tests[\"502 bad gateway\"] = false;",
							"        break;",
							"    case 599:",
							"        tests[\"599 Network connect timeout error\"] = false;",
							"        break;",
							"    case 408:",
							"        tests[\"408 Request is timeout\"] = false;",
							"        break;",
							"    default:",
							"        tests[\"Sorry, we are out of\" + responseCode.code] = false;",
							"}",
							"",
							"let jsonData = pm.response.json();",
							"pm.environment.set(\"ID\", jsonData.id);",
							"",
							"",
							"//var jsonData = JSON.parse(responseBody);",
							"//postman.setEnvironmentVariable(\"ID\", jsonData.id);",
							"",
							"//var jsonData = pm.response.json();",
							"//pm.environment.set(\"ID\", jsonData.id);",
							"",
							"//set Environmental variable 'id'",
							"//let jsonData = JSON.parse(responseBody);",
							"//postman.setEnvironmentalVariable(\"id\", jsonData.id);",
							"",
							"//one more way to set Env Var ID",
							"//var jsonData = JSON.parse(responseBody);",
							"//pm.environment.set(\"ID\", jsonData.id);",
							"",
							"",
							"pm.test(\"ID is correct\", function () {",
							"    pm.expect(jsonData.id).to.eql(pm.environment.get(\"ID\"));",
							"});",
							"",
							"//same test as above",
							"pm.test(\"ID is correct2\", function () {",
							"    const jsonData = pm.response.json();",
							"    pm.expect(jsonData.id).to.eql(pm.environment.get(\"ID\"));",
							"});",
							"",
							"",
							"",
							"pm.test(\"Status code is 200 \", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"",
							"",
							"",
							"pm.test(\"Response assertions\", function () {",
							"    pm.response.to.have.status(200);",
							"    pm.response.to.be.ok;",
							"    pm.response.to.to.be.json;",
							"});",
							"",
							"tests['Response code is 200 OK'] = responseCode.code === 200;",
							"",
							"pm.test(\"Body contains  string id\" , function () {",
							"    pm.expect(pm.response.text()).to.include(\"id\");",
							"});",
							"",
							"pm.test(\"Response time is less than 1000ms\", function () {",
							"    pm.expect(pm.response.responseTime).to.be.below(1000);",
							"});",
							"",
							"tests['Response Time is Acceptable'] = responseTime < 1000;",
							"",
							"",
							"pm.test(\"Response size is less than 2000ms\", function () {",
							"    pm.expect(pm.response.responseSize).to.be.below(2000);",
							"});",
							"",
							"",
							"pm.test(\"Header is correct\", function () {",
							"    pm.response.to.have.header(\"Content-Type\", \"application/json;charset=utf-8\");",
							"    pm.response.to.have.header (\"Content-Length\", \"45\");",
							"    pm.response.to.have.header (\"Connection\", \"keep-alive\");",
							"",
							"});",
							"    ",
							"",
							"pm.test(\"Response should be okay to process\", function () {",
							"    pm.response.to.not.be.error;",
							"    pm.response.to.be.withBody;",
							"    pm.response.to.not.have.jsonBody(\"error\");",
							"});",
							"",
							"",
							"",
							"",
							"",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"address\": {\n        \"fullName\": {\n            \"firstName\": \"{{firstName}}\",\n            \"lastName\": \"{{lastName}}\"\n        },\n        \"company\": \"{{company}}\",\n        \"taxInfo\": {\n            \"id\": null,\n            \"type\": null\n        },\n        \"addressLine1\": \"{{addressLine1}}\",\n        \"addressLine2\": \"{{addressLine2}}\",\n        \"street\": {\n            \"name\": null,\n            \"number\": null\n        },\n        \"city\": \"{{city}}\",\n        \"country\": \"{{country}}\",\n        \"subdivision\": \"{{subdivision}}\",\n        \"zipCode\": \"{{zipCode}}\",\n        \"phoneNumber\": \"{{phoneNumber}}\",\n        \"location\": {\n            \"latitude\": 34.0942294,\n            \"longitude\": -118.3752946\n        }\n    },\n    \"setAsDefault\": false\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://addresses.wixapps.net/_api/addresses-web/v1/addresses",
					"protocol": "https",
					"host": [
						"addresses",
						"wixapps",
						"net"
					],
					"path": [
						"_api",
						"addresses-web",
						"v1",
						"addresses"
					]
				}
			},
			"response": []
		},
		{
			"name": "Make  default  address",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"if(responseCode.code === 200) {",
							"    tests[\"Backend is available, response code is 200\"] = true;",
							"} else if (responseCode.code === 401) {",
							"    tests[\"Not authorised, check access token or Log in\"] = false;",
							"} else if (responseCode.code === 403) {",
							"    tests[\"Forbiden\"] = false;",
							"} else if (responseCode.code === 404) {",
							"    tests[\"Not Found. Check if you made correct request\"] = false;",
							"} else if (responseCode.code === 422) {",
							"    tests[\"he instance is not valid\"] = false;",
							"} else {",
							"    tests[\"Something went wrong. Check response body\"] = false;",
							"}",
							"",
							"",
							"",
							"let jsonData = pm.response.json();",
							"pm.environment.set(jsonData.id, \"ID\");",
							"",
							"pm.test(\"Response Time is less than 1000ms\", function () {",
							"    pm.expect(pm.response.responseTime).to.be.below(1000);",
							"});",
							"",
							"tests['Response Time is Acceptable'] = responseTime < 1000;",
							"",
							"pm.test(\"Response size is less than 2000ms\", function () {",
							"    pm.expect(pm.response.responseSize).to.be.below(2000);",
							"});",
							"",
							"",
							"pm.test(\"Header is correct\", function () {",
							"    pm.response.to.have.header(\"Content-Type\", \"application/json;charset=utf-8\");",
							"    pm.response.to.have.header (\"Content-Length\", \"2\");",
							"    pm.response.to.have.header (\"Connection\", \"keep-alive\");",
							"    pm.response.to.have.header (\"Server\", \"Pepyaka/1.19.10\");",
							"});",
							"",
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"    pm.response.to.be.ok;",
							"    pm.response.to.be.json;",
							"",
							"});",
							"",
							"pm.test(\"Response should be okay to process\", function () {",
							"    pm.response.to.not.be.error;",
							"    pm.response.to.be.withBody;",
							"    pm.response.to.be.json;",
							"    pm.response.to.not.have.jsonBody(\"error\");",
							"",
							"});",
							"",
							"",
							"pm.test(\"Body matches string {}\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"{}\");",
							"});",
							"",
							"",
							"",
							"",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"id\": \"{{ID}}\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://addresses.wixapps.net/_api/addresses-web/v1/addresses/default",
					"protocol": "https",
					"host": [
						"addresses",
						"wixapps",
						"net"
					],
					"path": [
						"_api",
						"addresses-web",
						"v1",
						"addresses",
						"default"
					]
				}
			},
			"response": []
		},
		{
			"name": "Show Default address",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"if(responseCode.code === 200) {",
							"    tests[\"Backend is available, response code is 200\"] = true;",
							"} else if (responseCode.code === 401) {",
							"    tests[\"Not authorised, check access token or Log in\"] = false;",
							"} else if (responseCode.code === 403) {",
							"    tests[\"Forbiden\"] = false;",
							"} else if (responseCode.code === 404) {",
							"    tests[\"Not Found. Check if you made correct request\"] = false;",
							"} else if (responseCode.code === 422) {",
							"    tests[\"he instance is not valid\"] = false;",
							"} else {",
							"    tests[\"Something went wrong. Check response body\"] = false;",
							"}",
							"",
							"pm.test(\"Response body is correct\", function() {",
							"    pm.expect(pm.response.text()).to.include(\"company\", pm.environment.get(\"COMPANY\"));",
							"    pm.expect(pm.response.text()).to.include(\"firstName\", pm.environment.get(\"firstName\"));",
							"    pm.expect(pm.response.text()).to.include(\"lastName\", pm.environment.get(\"lastName\"));",
							"    pm.expect(pm.response.text()).to.include(\"country\", pm.environment.get(\"country\"));",
							"    pm.expect(pm.response.text()).to.include(\"city\", pm.environment.get(\"city\"));",
							"    pm.expect(pm.response.text()).to.include(\"subdivision\", pm.environment.get(\"subdivision\"));",
							"    pm.expect(pm.response.text()).to.include(\"phoneNumber\", pm.environment.get(\"phoneNumber\"));",
							"    pm.expect(pm.response.text()).to.include(\"addressLine1\", pm.environment.get(\"addressLine1\"));",
							"    pm.expect(pm.response.text()).to.include(\"id\", pm.environment.get(\"id\"));",
							"  ",
							"",
							"});",
							"",
							"let jsonData = pm.response.json();",
							"pm.environment.set(jsonData.id, \"ID\");",
							"",
							"pm.test(\"Response should be okay to process\", function () {",
							"    pm.response.to.not.be.error;",
							"    pm.response.to.be.withBody;",
							"    pm.response.to.be.json;",
							"    pm.response.to.not.have.jsonBody(\"error\");",
							"",
							"});",
							"",
							"",
							"pm.test(\"Address ID is correct\", function () {",
							"    const jsonData = pm.response.json();",
							"    pm.expect(jsonData.address.id).to.eql(pm.environment.get(\"ID\"));",
							"});",
							"",
							"",
							"",
							"pm.test(\"Header is correct\", function () {",
							"    pm.response.to.have.header(\"Content-Type\", \"application/json;charset=utf-8\");",
							"    ",
							"    pm.response.to.have.header (\"Connection\", \"keep-alive\");",
							"    pm.response.to.have.header (\"Server\", \"Pepyaka/1.19.10\");",
							"",
							"});",
							"",
							"",
							"",
							"pm.test(\"Response time is less than 1000ms\", function () {",
							"    pm.expect(pm.response.responseTime).to.be.below(1000);",
							"});",
							"",
							"pm.test(\"Response size is less than 10 KB\", function () {",
							"    pm.expect(pm.response.responseSize).to.be.below(10240);",
							"});",
							"    ",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "https://addresses.wixapps.net/_api/addresses-web/v1/addresses/get-default-address",
					"protocol": "https",
					"host": [
						"addresses",
						"wixapps",
						"net"
					],
					"path": [
						"_api",
						"addresses-web",
						"v1",
						"addresses",
						"get-default-address"
					]
				}
			},
			"response": []
		},
		{
			"name": "Show All addresses",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"if(responseCode.code === 200) {",
							"    tests[\"Backend is available, response code is 200\"] = true;",
							"} else if (responseCode.code === 401) {",
							"    tests[\"Not authorised, check access token or Log in\"] = false;",
							"} else if (responseCode.code === 403) {",
							"    tests[\"Forbiden\"] = false;",
							"} else if (responseCode.code === 404) {",
							"    tests[\"Not Found. Check if you made correct request\"] = false;",
							"} else if (responseCode.code === 422) {",
							"    tests[\"he instance is not valid\"] = false;",
							"} else {",
							"    tests[\"Something went wrong. Check response body\"] = false;",
							"}",
							"",
							"",
							"switch (responseCode.code) {",
							"    case 200:",
							"        tests[\"200 ok. The request has succeeded\"] = true;",
							"        break;",
							"    case 404:",
							"        tests[\"404 Not found\"] = false;",
							"        break;",
							"    case 400:",
							"        tests[\"400 Bad Request\"] = false;",
							"        break;",
							"    case 401:",
							"        tests[\"401 BUnauthorized\"] = false;",
							"        break;",
							"    case 500:",
							"        tests[\"500 Internal Server Error\"] = false;",
							"        break;",
							"    case 503:",
							"        tests[\"503 Server unavailable\"] = false;",
							"        break;",
							"    case 502:",
							"        tests[\"502 bad gateway\"] = false;",
							"        break;",
							"    case 599:",
							"        tests[\"599 Network connect timeout error\"] = false;",
							"        break;",
							"    case 408:",
							"        tests[\"408 Request is timeout\"] = false;",
							"        break;",
							"    default:",
							"        tests[\"Sorry, we are out of\" + responseCode.code] = false;",
							"}",
							"",
							"",
							"",
							"pm.test(\"Response should be okay to process\", function () {",
							"    pm.response.to.not.be.error;",
							"    pm.response.to.be.withBody;",
							"    pm.response.to.not.have.jsonBody(\"error\");",
							"});",
							"",
							"pm.test(\"New ID is in response\", function () {",
							"pm.expect(pm.response.text()).to.include(pm.environment.get(\"ID\"));",
							"});",
							"",
							"",
							"",
							"",
							"pm.test(\"Response body is correct\", function() {",
							"    pm.expect(pm.response.text()).to.include(\"company\", pm.environment.get(\"COMPANY\"));",
							"    pm.expect(pm.response.text()).to.include(\"firstName\", pm.environment.get(\"firstName\"));",
							"    pm.expect(pm.response.text()).to.include(\"lastName\", pm.environment.get(\"lastName\"));",
							"    pm.expect(pm.response.text()).to.include(\"country\", pm.environment.get(\"country\"));",
							"    pm.expect(pm.response.text()).to.include(\"city\", pm.environment.get(\"city\"));",
							"    pm.expect(pm.response.text()).to.include(\"subdivision\", pm.environment.get(\"subdivision\"));",
							"    pm.expect(pm.response.text()).to.include(\"phoneNumber\", pm.environment.get(\"phoneNumber\"));",
							"    pm.expect(pm.response.text()).to.include(\"addressLine1\", pm.environment.get(\"addressLine1\"));",
							"    pm.expect(pm.response.text()).to.include(\"id\", pm.environment.get(\"id\"));",
							"  ",
							"",
							"});",
							"",
							"pm.test(\"Response Header is  present and correct\", function () {",
							"    pm.response.to.have.header(\"Content-Type\", \"application/json;charset=utf-8\");",
							"    pm.response.to.have.header (\"Server\", \"Pepyaka/1.19.10\");",
							"    pm.response.to.have.header (\"Connection\", \"keep-alive\");",
							"",
							"});",
							"",
							"",
							"pm.test(\"Response time is less than 1000ms\", function () {",
							"    pm.expect(pm.response.responseTime).to.be.below(1000);",
							"});",
							"",
							"pm.test(\"Response size is less than 10 KB\", function () {",
							"    pm.expect(pm.response.responseSize).to.be.below(10240);",
							"});",
							"",
							"",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://addresses.wixapps.net/_api/addresses-web/v1/addresses",
					"protocol": "https",
					"host": [
						"addresses",
						"wixapps",
						"net"
					],
					"path": [
						"_api",
						"addresses-web",
						"v1",
						"addresses"
					]
				}
			},
			"response": []
		},
		{
			"name": "Specific addresses",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"if(responseCode.code === 200) {",
							"    tests[\"Backend is available, response code is 200\"] = true;",
							"} else if (responseCode.code === 401) {",
							"    tests[\"Not authorised, check access token or Log in\"] = false;",
							"} else if (responseCode.code === 403) {",
							"    tests[\"Forbiden\"] = false;",
							"} else if (responseCode.code === 404) {",
							"    tests[\"Not Found. Check if you made correct request\"] = false;",
							"} else if (responseCode.code === 422) {",
							"    tests[\"he instance is not valid\"] = false;",
							"} else {",
							"    tests[\"Something went wrong. Check response body\"] = false;",
							"}",
							"",
							"pm.test(\"ID is correct\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.address.id).to.eql(pm.environment.get(\"ID\"));",
							"    pm.expect(jsonData.address.company).to.eql(pm.environment.get(\"company\"));",
							"    pm.expect(jsonData.address.fullName.firstName).to.eql(pm.environment.get(\"firstName\"));",
							"    pm.expect(jsonData.address.fullName.lastName).to.eql(pm.environment.get(\"lastName\"));",
							"    pm.expect(jsonData.address.country).to.eql(pm.environment.get(\"country\"));",
							"    pm.expect(jsonData.address.subdivision).to.eql(pm.environment.get(\"subdivision\"));",
							"    pm.expect(jsonData.address.city).to.eql(pm.environment.get(\"city\"));",
							"    pm.expect(jsonData.address.zipCode).to.eql('' + pm.environment.get(\"zipCode\"));",
							"    pm.expect(jsonData.address.phoneNumber).to.eql(pm.environment.get(\"phoneNumber\"));",
							"    pm.expect(jsonData.address.addressLine1).to.eql(pm.environment.get(\"addressLine1\"));",
							"    pm.expect(jsonData.address.addressLine2).to.eql('' + pm.environment.get(\"addressLine2\"));",
							"});",
							"",
							"",
							"pm.test(\"COMPANY is correct\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.address.company).to.eql(pm.environment.get(\"company\"));",
							"});",
							"",
							"",
							"pm.test(\"Status code is 200 \", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"",
							"pm.test(\"Response assertions\", function () {",
							"    pm.response.to.have.status(200);",
							"    pm.response.to.be.ok;",
							"    pm.response.to.to.be.json;",
							"});",
							"",
							"pm.test(\"Check isDefaultAddress\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.isDefaultAddress).to.eql(true);",
							"",
							"});",
							"",
							"",
							"",
							"",
							"",
							"",
							"",
							"",
							"pm.test(\"Response body should be in the correct format\", function () {",
							"    let jsonData = pm.response.json();",
							"    pm.expect(jsonData.address).to.be.a('object');",
							"    pm.expect(jsonData.address.id).to.be.a('string');",
							"    pm.expect(jsonData.address.fullName).to.be.a('object');",
							"    pm.expect(jsonData.address.fullName.firstName).to.be.a('string');",
							"    pm.expect(jsonData.address.fullName.lastName).to.be.a('string');",
							"    pm.expect(jsonData.address.country).to.be.a('string');",
							"    pm.expect(jsonData.address.subdivision).to.be.a('string');",
							"    pm.expect(jsonData.address.city).to.be.a('string');",
							"    pm.expect(jsonData.address.zipCode).to.be.a('string');",
							"    pm.expect(jsonData.address.phoneNumber).to.be.a('string');",
							"    pm.expect(jsonData.address.addressLine1).to.be.a('string');",
							"    pm.expect(jsonData.isDefaultAddress).to.be.a('boolean');",
							"});",
							"",
							"",
							"pm.test(\"Response time is less than 1000ms\", function () {",
							"    pm.expect(pm.response.responseTime).to.be.below(1000);",
							"});",
							"",
							"",
							"pm.test(\"Response size is less than 2000ms\", function () {",
							"    pm.expect(pm.response.responseSize).to.be.below(2000);",
							"});",
							"",
							"",
							"pm.test(\"Header is correct\", function () {",
							"    pm.response.to.have.header(\"Content-Type\", \"application/json;charset=utf-8\");",
							"    pm.response.to.have.header (\"Server\", \"Pepyaka/1.19.10\");",
							"    pm.response.to.have.header (\"Connection\", \"keep-alive\");",
							"    ",
							"});",
							"    ",
							"",
							"pm.test(\"Response should be okay to process\", function () {",
							"    pm.response.to.not.be.error;",
							"    pm.response.to.be.withBody;",
							"    pm.response.to.not.have.jsonBody(\"error\");",
							"});",
							"",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://addresses.wixapps.net/_api/addresses-web/v1/addresses/?id={{ID}}",
					"protocol": "https",
					"host": [
						"addresses",
						"wixapps",
						"net"
					],
					"path": [
						"_api",
						"addresses-web",
						"v1",
						"addresses",
						""
					],
					"query": [
						{
							"key": "id",
							"value": "{{ID}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "New Request",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"",
							"// pm.environment.unset(\"ID\");",
							" pm.environment.unset(\"company\");",
							" pm.environment.unset(\"zipCode\");",
							" pm.environment.unset(\"addressLine1\");",
							" pm.environment.unset(\"addressLine2\");",
							"pm.environment.unset(\"firstName\");",
							" pm.environment.unset(\"lastName\");",
							" pm.environment.unset(\"city\");",
							"pm.environment.unset(\"country\");",
							" pm.environment.unset(\"phoneNumber\");",
							"pm.environment.unset(\"subdivision\");",
							"//returns a random integer from 10000 to 90000 with 5 digits",
							"pm.environment.set(\"zipCode\", Math.floor(Math.random()*90000) + 10000);",
							"//returns a random integer from 100 to 900 with 3 digits",
							"pm.environment.set(\"addressLine2\", Math.floor(Math.random()*900) + 100);",
							"const stateAbbreviations = [",
							" 'AL','AK','AS','AZ','AR','CA','CO','CT','DE','DC','FM','FL','GA',",
							" 'GU','HI','ID','IL','IN','IA','KS','KY','LA','ME','MH','MD','MA',",
							" 'MI','MN','MS','MO','MT','NE','NV','NH','NJ','NM','NY','NC','ND',",
							" 'MP','OH','OK','OR','PW','PA','PR','RI','SC','SD','TN','TX','UT',",
							" 'VT','VI','VA','WA','WV','WI','WY'",
							"];",
							"const randomState = stateAbbreviations[Math.floor(Math.random() * stateAbbreviations.length)];",
							"pm.environment.set(\"subdivision\", randomState);",
							"// Using Faker lib https://learning.postman.com/docs/writing-scripts/script-references/variables-list/",
							"let fName = pm.variables.replaceIn('{{$randomFirstName}}')",
							"pm.environment.set(\"firstName\", fName);",
							"let lName = pm.variables.replaceIn('{{$randomLastName}}')",
							"pm.environment.set(\"lastName\", lName);",
							"let co = pm.variables.replaceIn('{{$randomCompanyName}}')",
							"pm.environment.set(\"company\", co);",
							"let addrLn1 = pm.variables.replaceIn('{{$randomStreetAddress}}')",
							"pm.environment.set(\"addressLine1\", addrLn1);",
							"let cty = pm.variables.replaceIn('{{$randomCity}}')",
							"pm.environment.set(\"city\", cty);",
							"let cntry = pm.variables.replaceIn('{{$randomCountry}}')",
							"pm.environment.set(\"country\", cntry);",
							"let phoneNum = pm.variables.replaceIn('{{$randomPhoneNumber}}')",
							"pm.environment.set(\"phoneNumber\", phoneNum);"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"if(responseCode.code === 200) {",
							"    tests[\"Backend is available, response code is 200\"] = true;",
							"} else if (responseCode.code === 401) {",
							"    tests[\"Not authorised, check access token or Log in\"] = false;",
							"} else if (responseCode.code === 403) {",
							"    tests[\"Forbiden\"] = false;",
							"} else if (responseCode.code === 404) {",
							"    tests[\"Not Found. Check if you made correct request\"] = false;",
							"} else if (responseCode.code === 422) {",
							"    tests[\"he instance is not valid\"] = false;",
							"} else {",
							"    tests[\"Something went wrong. Check response body\"] = false;",
							"}",
							"",
							"",
							"pm.test(\"Response Time is less than 1000ms\", function () {",
							"    pm.expect(pm.response.responseTime).to.be.below(1000);",
							"});",
							"",
							"tests['Response Time is Acceptable'] = responseTime < 1000;",
							"",
							"pm.test(\"Response size is less than 2000ms\", function () {",
							"    pm.expect(pm.response.responseSize).to.be.below(2000);",
							"});",
							"",
							"",
							"pm.test(\"Header is correct\", function () {",
							"    pm.response.to.have.header(\"Content-Type\", \"application/json;charset=utf-8\");",
							"    pm.response.to.have.header (\"Content-Length\", \"2\");",
							"    pm.response.to.have.header (\"Connection\", \"keep-alive\");",
							"    pm.response.to.have.header (\"Server\", \"Pepyaka/1.19.10\");",
							"});",
							"",
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"    pm.response.to.be.ok;",
							"    pm.response.to.be.json;",
							"",
							"});",
							"",
							"pm.test(\"Response should be okay to process\", function () {",
							"    pm.response.to.not.be.error;",
							"    pm.response.to.be.withBody;",
							"    pm.response.to.be.json;",
							"    pm.response.to.not.have.jsonBody(\"error\");",
							"",
							"});",
							"",
							"",
							"",
							"pm.test(\"Body matches string {}\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"{}\");",
							"});",
							"",
							"",
							"",
							"",
							"pm.test(\"Status code is 200 \", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"",
							"",
							"",
							"pm.test(\"Response assertions\", function () {",
							"    pm.response.to.have.status(200);",
							"    pm.response.to.be.ok;",
							"    pm.response.to.to.be.json;",
							"});",
							"",
							"tests['Response code is 200 OK'] = responseCode.code === 200;",
							"",
							"pm.test(\"Response time is less than 1000ms\", function () {",
							"    pm.expect(pm.response.responseTime).to.be.below(1000);",
							"});",
							"",
							"tests['Response Time is Acceptable'] = responseTime < 1000;",
							"",
							"",
							"pm.test(\"Response size is less than 2000ms\", function () {",
							"    pm.expect(pm.response.responseSize).to.be.below(2000);",
							"});",
							"",
							"",
							"pm.test(\"Header is correct\", function () {",
							"    pm.response.to.have.header(\"Content-Type\", \"application/json;charset=utf-8\");",
							"    pm.response.to.have.header (\"Content-Length\", \"2\");",
							"    pm.response.to.have.header (\"Connection\", \"keep-alive\");",
							"",
							"});",
							"    ",
							"",
							"pm.test(\"Response should be okay to process\", function () {",
							"    pm.response.to.not.be.error;",
							"    pm.response.to.be.withBody;",
							"    pm.response.to.not.have.jsonBody(\"error\");",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disabledSystemHeaders": {}
			},
			"request": {
				"method": "PATCH",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"address\": {\n        \"id\": \"{{ID}}\",\n        \"fullName\": {\n            \"firstName\": \"{{firstName}}\",\n            \"lastName\": \"{{lastName}}\"\n        },\n        \"company\": \"{{company}}\",\n        \"taxInfo\": {\n            \"id\": null,\n            \"type\": null\n        },\n        \"addressLine1\": \"{{addressLine1}}\",\n        \"addressLine2\": \"{{addressLine2}}\",\n        \"street\": {\n            \"name\": null,\n            \"number\": null\n        },\n        \"city\": \"{{city}}\",\n        \"country\": \"{{country}}\",\n        \"subdivision\": \"{{subdivision}}\",\n        \"zipCode\": \"{{zipCode}}\",\n        \"phoneNumber\": \"{{phoneNumber}}\",\n        \"location\": {\n            \"latitude\": 34.0930087,\n            \"longitude\": -118.2815088\n        }\n    },\n    \"setAsDefault\": false,\n    \"fieldMask\": {\n        \"paths\": [\n            \"fullName.firstName\",\n            \"fullName.lastName\",\n            \"company\",\n            \"addressLine1\",\n            \"addressLine2\",\n            \"city\",\n            \"country\",\n            \"subdivision\",\n            \"zipCode\",\n            \"phoneNumber\",\n            \"location.latitude\",\n            \"location.longitude\",\n            \"setAsDefault\"\n        ]\n    }\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://addresses.wixapps.net/_api/addresses-web/v1/addresses/?id={{ID}}",
					"protocol": "https",
					"host": [
						"addresses",
						"wixapps",
						"net"
					],
					"path": [
						"_api",
						"addresses-web",
						"v1",
						"addresses",
						""
					],
					"query": [
						{
							"key": "id",
							"value": "{{ID}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete the address",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"if(responseCode.code === 200) {",
							"    tests[\"Backend is available, response code is 200\"] = true;",
							"} else if (responseCode.code === 401) {",
							"    tests[\"Not authorised, check access token or Log in\"] = false;",
							"} else if (responseCode.code === 400) {",
							"    tests[\"Forbiden\"] = true;",
							"} else if (responseCode.code === 403) {",
							"    tests[\"Not Found. Check if you made correct request\"] = false;",
							"} else if (responseCode.code === 404) {",
							"    tests[\"he instance is not valid\"] = false;",
							"} else {",
							"    tests[\"Something went wrong. Check response body\"] = false;",
							"}",
							"",
							"",
							"",
							"pm.test(\"Response Time is less than 1000ms\", function () {",
							"    pm.expect(pm.response.responseTime).to.be.below(1000);",
							"",
							"});",
							"",
							"",
							"pm.test(\"Response size is less than 2000ms\", function () {",
							"    pm.expect(pm.response.responseSize).to.be.below(2000);",
							"});",
							"",
							"",
							"",
							"pm.test(\"Header is correct\", function () {",
							"    pm.response.to.have.header(\"Content-Type\", \"application/json;charset=utf-8\");",
							"    pm.response.to.have.header (\"Content-Length\", \"2\");",
							"    pm.response.to.have.header (\"Connection\", \"keep-alive\");",
							"    pm.response.to.have.header (\"Server\", \"Pepyaka/1.19.10\");",
							"",
							"});",
							"",
							"pm.test(\"Order has been deleted, OK\", function () {",
							"    pm.response.to.be.withBody;",
							"    pm.response.to.be.json;",
							"    pm.response.to.have.jsonBody ({});",
							"});",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "https://addresses.wixapps.net/_api/addresses-web/v1/addresses/?id={{ID}}",
					"protocol": "https",
					"host": [
						"addresses",
						"wixapps",
						"net"
					],
					"path": [
						"_api",
						"addresses-web",
						"v1",
						"addresses",
						""
					],
					"query": [
						{
							"key": "id",
							"value": "{{ID}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Read Specific Deleted  addresses",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"if(responseCode.code === 200) {",
							"    tests[\"Backend is available, response code is 200\"] = false;",
							"} else if (responseCode.code === 400) {",
							"    tests[\"Not authorised, check access token or Log in\"] = true;",
							"} else if (responseCode.code === 403) {",
							"    tests[\"Forbiden\"] = false;",
							"} else if (responseCode.code === 404) {",
							"    tests[\"Not Found. Check if you made correct request\"] = false;",
							"} else if (responseCode.code === 422) {",
							"    tests[\"he instance is not valid\"] = false;",
							"} else {",
							"    tests[\"Something went wrong. Check response body\"] = false;",
							"}",
							"pm.test(\"ID is in response\", function () {",
							"    pm.expect(pm.response.text()).to.include(pm.environment.get(\"ID\"));",
							"});",
							"",
							"",
							"pm.test(\"Header is correct\", function () {",
							"    pm.response.to.have.header(\"Content-Type\", \"application/json;charset=utf-8\");",
							"    pm.response.to.have.header (\"Content-Length\", \"191\");",
							"    pm.response.to.have.header (\"Connection\", \"keep-alive\");",
							"",
							"});",
							"",
							"pm.test(\"Response time is less than 1000ms\", function () {",
							"    pm.expect(pm.response.responseTime).to.be.below(1000);",
							"});",
							"",
							"",
							"pm.test(\"Response size is less than 2000ms\", function () {",
							"    pm.expect(pm.response.responseSize).to.be.below(2000);",
							"});",
							"",
							"",
							"pm.test(\"Details is correct\", function () {",
							"   const jsonData = pm.response.json();",
							"pm.expect(jsonData.details.cant_find).to.eql('address_id: '+ pm.environment.get(\"ID\")); ",
							"});",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://addresses.wixapps.net/_api/addresses-web/v1/addresses/?id={{ID}}",
					"protocol": "https",
					"host": [
						"addresses",
						"wixapps",
						"net"
					],
					"path": [
						"_api",
						"addresses-web",
						"v1",
						"addresses",
						""
					],
					"query": [
						{
							"key": "id",
							"value": "{{ID}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "DELETE address 2nd  time",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"if(responseCode.code === 200) {",
							"    tests[\"Backend is available, response code is 200\"] = true;",
							"} else if (responseCode.code === 401) {",
							"    tests[\"Not authorised, check access token or Log in\"] = false;",
							"} else if (responseCode.code === 400) {",
							"    tests[\"Forbiden\"] = true;",
							"} else if (responseCode.code === 403) {",
							"    tests[\"Not Found. Check if you made correct request\"] = false;",
							"} else if (responseCode.code === 404) {",
							"    tests[\"he instance is not valid\"] = false;",
							"} else {",
							"    tests[\"Something went wrong. Check response body\"] = false;",
							"}",
							"",
							"",
							"",
							"pm.test(\"Response Time is less than 1000ms\", function () {",
							"    pm.expect(pm.response.responseTime).to.be.below(1000);",
							"",
							"});",
							"",
							"",
							"pm.test(\"Response size is less than 2000ms\", function () {",
							"    pm.expect(pm.response.responseSize).to.be.below(2000);",
							"});",
							"",
							"",
							"",
							"pm.test(\"Header is correct\", function () {",
							"    pm.response.to.have.header(\"Content-Type\", \"application/json;charset=utf-8\");",
							"    pm.response.to.have.header (\"Content-Length\", \"191\");",
							"    pm.response.to.have.header (\"Connection\", \"keep-alive\");",
							"    pm.response.to.have.header (\"Server\", \"Pepyaka/1.19.10\");",
							"",
							"});",
							"",
							"pm.test(\"Order has been deleted, OK\", function () {",
							"    pm.response.to.be.withBody;",
							"    pm.response.to.be.json;",
							"    pm.response.to.have.jsonBody ({});",
							"});",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "https://addresses.wixapps.net/_api/addresses-web/v1/addresses/?id={{ID}}",
					"protocol": "https",
					"host": [
						"addresses",
						"wixapps",
						"net"
					],
					"path": [
						"_api",
						"addresses-web",
						"v1",
						"addresses",
						""
					],
					"query": [
						{
							"key": "id",
							"value": "{{ID}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Make Deleted address by defalt",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"",
							"",
							"switch (responseCode.code) {",
							"    case 200:",
							"        tests[\"200 ok. The request has succeeded\"] = false;",
							"        break;",
							"    case 404:",
							"        tests[\"404 Not found\"] = false;",
							"        break;",
							"    case 400:",
							"        tests[\"400 Bad Request\"] = true;",
							"        break;",
							"    case 401:",
							"        tests[\"401 BUnauthorized\"] = false;",
							"        break;",
							"    case 500:",
							"        tests[\"500 Internal Server Error\"] = false;",
							"        break;",
							"    case 503:",
							"        tests[\"503 Server unavailable\"] = false;",
							"        break;",
							"    case 502:",
							"        tests[\"502 bad gateway\"] = false;",
							"        break;",
							"    case 599:",
							"        tests[\"599 Network connect timeout error\"] = false;",
							"        break;",
							"    case 408:",
							"        tests[\"408 Request is timeout\"] = false;",
							"        break;",
							"    default:",
							"        tests[\"Sorry, we are out of\" + responseCode.code] = false;",
							"}",
							"",
							"",
							"pm.test(\"Response Time is less than 1000ms\", function () {",
							"    pm.expect(pm.response.responseTime).to.be.below(1000);",
							"",
							"});",
							"",
							"",
							"pm.test(\"Response size is less than 2000ms\", function () {",
							"    pm.expect(pm.response.responseSize).to.be.below(2000);",
							"});",
							"",
							"pm.test(\"Header is correct\", function () {",
							"    pm.response.to.have.header(\"Content-Type\", \"application/json;charset=utf-8\");",
							"    pm.response.to.have.header (\"Content-Length\", \"191\");",
							"    pm.response.to.have.header (\"Connection\", \"keep-alive\");",
							"    pm.response.to.have.header (\"Server\", \"Pepyaka/1.19.10\");",
							"",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"id\": \"{{ID}}\"\n}"
				},
				"url": {
					"raw": "https://addresses.wixapps.net/_api/addresses-web/v1/addresses/default",
					"protocol": "https",
					"host": [
						"addresses",
						"wixapps",
						"net"
					],
					"path": [
						"_api",
						"addresses-web",
						"v1",
						"addresses",
						"default"
					]
				}
			},
			"response": []
		}
	],
	"auth": {
		"type": "apikey",
		"apikey": [
			{
				"key": "value",
				"value": "SjnRQdkEe94x4FEUd1oWeL3wtrpJT-4rKa4rTnrYEYc.eyJpbnN0YW5jZUlkIjoiZjQ2Y2Q1MDItZjcyZi00NGY3LTk2MzgtNWRhMWRlYjBiNGU3IiwiYXBwRGVmSWQiOiIxNTA1Yjc3NS1lODg1LWViMWItYjY2NS0xZTQ4NWQ5YmY5MGUiLCJtZXRhU2l0ZUlkIjoiMjhiNzkzZDYtNTQyNC00MDU4LTgwNDktMDI2YTRkYjAyODJmIiwic2lnbkRhdGUiOiIyMDIzLTEwLTAzVDIwOjE2OjQ5LjAwNloiLCJ1aWQiOiJhMjI0YmI4OC00Zjg2LTQxMDQtOWY0NS1iNjVkOWQwZWRhZjciLCJkZW1vTW9kZSI6ZmFsc2UsImFpZCI6ImZlZGZhYTRiLWQ1YzMtNDk3Mi1hODA1LTc4M2MxYTNmMzczZiIsImJpVG9rZW4iOiJkY2RiNDZkNC1hMzBiLTA0YWYtMTY3MS01ZmNiOTMwMDljYzgiLCJzaXRlT3duZXJJZCI6ImY5MTRmMTFjLWFhYjMtNDUyNy04ZDRlLWJhYjc2MjE0M2E2MCIsImV4cGlyYXRpb25EYXRlIjoiMjAyMy0xMC0wNFQwMDoxNjo0OS4wMDZaIiwiaGFzVXNlclJvbGUiOmZhbHNlfQ",
				"type": "string"
			},
			{
				"key": "in",
				"value": "header",
				"type": "string"
			},
			{
				"key": "key",
				"value": "Authorization",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	]
}