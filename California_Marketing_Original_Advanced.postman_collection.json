{
	"info": {
		"_postman_id": "793012a2-ca9b-402f-bd81-66d1ba9ede7f",
		"name": "California_Marketing_Original_Advanced",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "27790957"
	},
	"item": [
		{
			"name": "Added new address",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"if(responseCode.code === 200) {",
							"    tests[\"Backend is available, response code is 200\"] = true;",
							"} else if (responseCode.code === 401) {",
							"    tests[\"Not authorised, check access token or Log in\"] = false;",
							"} else if (responseCode.code === 403) {",
							"    tests[\"Forbiden\"] = false;",
							"} else if (responseCode.code === 404) {",
							"    tests[\"Not Found. Check if you made correct request\"] = false;",
							"} else if (responseCode.code === 422) {",
							"    tests[\"he instance is not valid\"] = false;",
							"} else {",
							"    tests[\"Something went wrong. Check response body\"] = false;",
							"}",
							"",
							"",
							"switch (responseCode.code) {",
							"    case 200:",
							"        tests[\"200 ok. The request has succeeded\"] = true;",
							"        break;",
							"    case 404:",
							"        tests[\"404 Not found\"] = false;",
							"        break;",
							"    case 400:",
							"        tests[\"400 Bad Request\"] = false;",
							"        break;",
							"    case 401:",
							"        tests[\"401 BUnauthorized\"] = false;",
							"        break;",
							"    case 500:",
							"        tests[\"500 Internal Server Error\"] = false;",
							"        break;",
							"    case 503:",
							"        tests[\"503 Server unavailable\"] = false;",
							"        break;",
							"    case 502:",
							"        tests[\"502 bad gateway\"] = false;",
							"        break;",
							"    case 599:",
							"        tests[\"599 Network connect timeout error\"] = false;",
							"        break;",
							"    case 408:",
							"        tests[\"408 Request is timeout\"] = false;",
							"        break;",
							"    default:",
							"        tests[\"Sorry, we are out of\" + responseCode.code] = false;",
							"}",
							"",
							"let jsonData = pm.response.json();",
							"pm.environment.set(\"ID\", jsonData.id);",
							"",
							"//set Environmental variable 'id'",
							"//let jsonData = JSON.parse(responseBody);",
							"//postman.setEnvironmentalVariable(\"id\", jsonData.id);",
							"",
							"//one more way to set Env Var ID",
							"//var jsonData = JSON.parse(responseBody);",
							"//pm.environment.set(\"ID\", jsonData.id);",
							"",
							"",
							"pm.test(\"ID is correct\", function () {",
							"    pm.expect(jsonData.id).to.eql(pm.environment.get(\"ID\"));",
							"});",
							"",
							"//same test as above",
							"pm.test(\"ID is correct2\", function () {",
							"    const jsonData = pm.response.json();",
							"    pm.expect(jsonData.id).to.eql(pm.environment.get(\"ID\"));",
							"});",
							"",
							"",
							"",
							"pm.test(\"Status code is 200 \", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"",
							"",
							"",
							"pm.test(\"Response assertions\", function () {",
							"    pm.response.to.have.status(200);",
							"    pm.response.to.be.ok;",
							"    pm.response.to.to.be.json;",
							"});",
							"",
							"tests['Response code is 200 OK'] = responseCode.code === 200;",
							"",
							"pm.test(\"Body contains  string id\" , function () {",
							"    pm.expect(pm.response.text()).to.include(\"id\");",
							"});",
							"",
							"pm.test(\"Response time is less than 1000ms\", function () {",
							"    pm.expect(pm.response.responseTime).to.be.below(1000);",
							"});",
							"",
							"tests['Response Time is Acceptable'] = responseTime < 1000;",
							"",
							"",
							"pm.test(\"Response size is less than 2000ms\", function () {",
							"    pm.expect(pm.response.responseSize).to.be.below(2000);",
							"});",
							"",
							"",
							"pm.test(\"Header is correct\", function () {",
							"    pm.response.to.have.header(\"Content-Type\", \"application/json;charset=utf-8\");",
							"    pm.response.to.have.header (\"Content-Length\", \"45\");",
							"    pm.response.to.have.header (\"Connection\", \"keep-alive\");",
							"",
							"});",
							"    ",
							"",
							"pm.test(\"Response should be okay to process\", function () {",
							"    pm.response.to.not.be.error;",
							"    pm.response.to.be.withBody;",
							"    pm.response.to.not.have.jsonBody(\"error\");",
							"});",
							"",
							"",
							"",
							"",
							"",
							"",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"pm.environment.unset(\"ID\");",
							"pm.environment.unset(\"COMPANY\");",
							"pm.environment.set(\"COMPANY\", \"Apple-\" + new Date().getTime());",
							"",
							"//or",
							"//pm.enviroment.clear();",
							"",
							"",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"address\": {\n        \"fullName\": {\n            \"firstName\": \"Kristina \",\n            \"lastName\": \"Ivanova\"\n        },\n        \"company\": \"{{COMPANY}}\",\n        \"taxInfo\": {\n            \"id\": null,\n            \"type\": null\n        },\n        \"addressLine1\": \"123 South Main Street\",\n        \"addressLine2\": \"Apt 333\",\n        \"street\": {\n            \"name\": null,\n            \"number\": null\n        },\n        \"city\": \"Los Angeles\",\n        \"country\": \"USA\",\n        \"subdivision\": \"CA\",\n        \"zipCode\": \"90012\",\n        \"phoneNumber\": \"5555555555\",\n        \"location\": {\n            \"latitude\": 34.0520344,\n            \"longitude\": -118.2438762\n        }\n    },\n    \"setAsDefault\": false\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://addresses.wixapps.net/_api/addresses-web/v1/addresses",
					"protocol": "https",
					"host": [
						"addresses",
						"wixapps",
						"net"
					],
					"path": [
						"_api",
						"addresses-web",
						"v1",
						"addresses"
					]
				}
			},
			"response": []
		},
		{
			"name": "Make  default  address",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"if(responseCode.code === 200) {",
							"    tests[\"Backend is available, response code is 200\"] = true;",
							"} else if (responseCode.code === 401) {",
							"    tests[\"Not authorised, check access token or Log in\"] = false;",
							"} else if (responseCode.code === 403) {",
							"    tests[\"Forbiden\"] = false;",
							"} else if (responseCode.code === 404) {",
							"    tests[\"Not Found. Check if you made correct request\"] = false;",
							"} else if (responseCode.code === 422) {",
							"    tests[\"he instance is not valid\"] = false;",
							"} else {",
							"    tests[\"Something went wrong. Check response body\"] = false;",
							"}",
							"",
							"",
							"",
							"let jsonData = pm.response.json();",
							"pm.environment.set(jsonData.id, \"ID\");",
							"",
							"pm.test(\"Response Time is less than 1000ms\", function () {",
							"    pm.expect(pm.response.responseTime).to.be.below(1000);",
							"});",
							"",
							"tests['Response Time is Acceptable'] = responseTime < 1000;",
							"",
							"pm.test(\"Response size is less than 2000ms\", function () {",
							"    pm.expect(pm.response.responseSize).to.be.below(2000);",
							"});",
							"",
							"",
							"pm.test(\"Header is correct\", function () {",
							"    pm.response.to.have.header(\"Content-Type\", \"application/json;charset=utf-8\");",
							"    pm.response.to.have.header (\"Content-Length\", \"2\");",
							"    pm.response.to.have.header (\"Connection\", \"keep-alive\");",
							"    pm.response.to.have.header (\"Server\", \"Pepyaka/1.19.10\");",
							"});",
							"",
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"    pm.response.to.be.ok;",
							"    pm.response.to.be.json;",
							"",
							"});",
							"",
							"pm.test(\"Response should be okay to process\", function () {",
							"    pm.response.to.not.be.error;",
							"    pm.response.to.be.withBody;",
							"    pm.response.to.be.json;",
							"    pm.response.to.not.have.jsonBody(\"error\");",
							"",
							"});",
							"",
							"",
							"pm.test(\"Body matches string {}\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"{}\");",
							"});",
							"",
							"",
							"",
							"",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"id\": \"{{ID}}\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://addresses.wixapps.net/_api/addresses-web/v1/addresses/default",
					"protocol": "https",
					"host": [
						"addresses",
						"wixapps",
						"net"
					],
					"path": [
						"_api",
						"addresses-web",
						"v1",
						"addresses",
						"default"
					]
				}
			},
			"response": []
		},
		{
			"name": "Show Default address",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"if(responseCode.code === 200) {",
							"    tests[\"Backend is available, response code is 200\"] = true;",
							"} else if (responseCode.code === 401) {",
							"    tests[\"Not authorised, check access token or Log in\"] = false;",
							"} else if (responseCode.code === 403) {",
							"    tests[\"Forbiden\"] = false;",
							"} else if (responseCode.code === 404) {",
							"    tests[\"Not Found. Check if you made correct request\"] = false;",
							"} else if (responseCode.code === 422) {",
							"    tests[\"he instance is not valid\"] = false;",
							"} else {",
							"    tests[\"Something went wrong. Check response body\"] = false;",
							"}",
							"",
							"pm.test(\"COMPANY is Apple\", function() {",
							"    pm.expect(pm.response.text()).to.include(\"company\", pm.environment.get(\"COMPANY\"));",
							"});",
							"",
							"let jsonData = pm.response.json();",
							"pm.environment.set(jsonData.id, \"ID\");",
							"",
							"pm.test(\"Response should be okay to process\", function () {",
							"    pm.response.to.not.be.error;",
							"    pm.response.to.be.withBody;",
							"    pm.response.to.be.json;",
							"    pm.response.to.not.have.jsonBody(\"error\");",
							"",
							"});",
							"",
							"",
							"pm.test(\"Address ID is correct\", function () {",
							"    const jsonData = pm.response.json();",
							"    pm.expect(jsonData.address.id).to.eql(pm.environment.get(\"ID\"));",
							"});",
							"",
							"",
							"",
							"pm.test(\"Body is correct\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.address.fullName.firstName).to.eql(\"Kristina\");",
							"    pm.expect(jsonData.address.fullName.lastName).to.eql(\"Ivanova\");",
							"    pm.expect(jsonData.address.country).to.eql(\"USA\");",
							"    pm.expect(jsonData.address.subdivision).to.eql(\"CA\");",
							"    pm.expect(jsonData.address.city).to.eql(\"Los Angeles\");",
							"    pm.expect(jsonData.address.zipCode).to.eql(\"90012\");",
							"    pm.expect(jsonData.address.phoneNumber).to.eql(\"5555555555\");",
							"    pm.expect(jsonData.address.addressLine1).to.eql(\"123 South Main Street\");",
							"   ",
							"  ",
							"});",
							"",
							"",
							"",
							"pm.test(\"Header is correct\", function () {",
							"    pm.response.to.have.header(\"Content-Type\", \"application/json;charset=utf-8\");",
							"    pm.response.to.have.header (\"Content-Length\", \"371\");",
							"    pm.response.to.have.header (\"Connection\", \"keep-alive\");",
							"",
							"});",
							"",
							"",
							"",
							"",
							"",
							"pm.test(\"Response time is less than 1000ms\", function () {",
							"    pm.expect(pm.response.responseTime).to.be.below(1000);",
							"});",
							"",
							"pm.test(\"Response size is less than 10 KB\", function () {",
							"    pm.expect(pm.response.responseSize).to.be.below(10240);",
							"});",
							"    ",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "https://addresses.wixapps.net/_api/addresses-web/v1/addresses/get-default-address",
					"protocol": "https",
					"host": [
						"addresses",
						"wixapps",
						"net"
					],
					"path": [
						"_api",
						"addresses-web",
						"v1",
						"addresses",
						"get-default-address"
					]
				}
			},
			"response": []
		},
		{
			"name": "Show All addresses",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"if(responseCode.code === 200) {",
							"    tests[\"Backend is available, response code is 200\"] = true;",
							"} else if (responseCode.code === 401) {",
							"    tests[\"Not authorised, check access token or Log in\"] = false;",
							"} else if (responseCode.code === 403) {",
							"    tests[\"Forbiden\"] = false;",
							"} else if (responseCode.code === 404) {",
							"    tests[\"Not Found. Check if you made correct request\"] = false;",
							"} else if (responseCode.code === 422) {",
							"    tests[\"he instance is not valid\"] = false;",
							"} else {",
							"    tests[\"Something went wrong. Check response body\"] = false;",
							"}",
							"",
							"",
							"switch (responseCode.code) {",
							"    case 200:",
							"        tests[\"200 ok. The request has succeeded\"] = true;",
							"        break;",
							"    case 404:",
							"        tests[\"404 Not found\"] = false;",
							"        break;",
							"    case 400:",
							"        tests[\"400 Bad Request\"] = false;",
							"        break;",
							"    case 401:",
							"        tests[\"401 BUnauthorized\"] = false;",
							"        break;",
							"    case 500:",
							"        tests[\"500 Internal Server Error\"] = false;",
							"        break;",
							"    case 503:",
							"        tests[\"503 Server unavailable\"] = false;",
							"        break;",
							"    case 502:",
							"        tests[\"502 bad gateway\"] = false;",
							"        break;",
							"    case 599:",
							"        tests[\"599 Network connect timeout error\"] = false;",
							"        break;",
							"    case 408:",
							"        tests[\"408 Request is timeout\"] = false;",
							"        break;",
							"    default:",
							"        tests[\"Sorry, we are out of\" + responseCode.code] = false;",
							"}",
							"",
							"",
							"",
							"pm.test(\"Response should be okay to process\", function () {",
							"    pm.response.to.not.be.error;",
							"    pm.response.to.be.withBody;",
							"    pm.response.to.not.have.jsonBody(\"error\");",
							"});",
							"",
							"pm.test(\"New ID is in response\", function () {",
							"pm.expect(pm.response.text()).to.include(pm.environment.get(\"ID\"));",
							"});",
							"",
							"pm.test(\"New COMPANY is in response\", function () {",
							"pm.expect(pm.response.text()).to.include(pm.environment.get(\"COMPANY\"));",
							"});",
							"",
							"",
							"pm.test(\"Response Header is  present and correct\", function () {",
							"    pm.response.to.have.header(\"Content-Type\", \"application/json;charset=utf-8\");",
							"    pm.response.to.have.header (\"Server\", \"Pepyaka/1.19.10\");",
							"    pm.response.to.have.header (\"Connection\", \"keep-alive\");",
							"",
							"});",
							"",
							"",
							"pm.test(\"Response time is less than 1000ms\", function () {",
							"    pm.expect(pm.response.responseTime).to.be.below(1000);",
							"});",
							"",
							"pm.test(\"Response size is less than 10 KB\", function () {",
							"    pm.expect(pm.response.responseSize).to.be.below(10240);",
							"});",
							"",
							"",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://addresses.wixapps.net/_api/addresses-web/v1/addresses",
					"protocol": "https",
					"host": [
						"addresses",
						"wixapps",
						"net"
					],
					"path": [
						"_api",
						"addresses-web",
						"v1",
						"addresses"
					]
				}
			},
			"response": []
		},
		{
			"name": "Specific addresses",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"if(responseCode.code === 200) {",
							"    tests[\"Backend is available, response code is 200\"] = true;",
							"} else if (responseCode.code === 401) {",
							"    tests[\"Not authorised, check access token or Log in\"] = false;",
							"} else if (responseCode.code === 403) {",
							"    tests[\"Forbiden\"] = false;",
							"} else if (responseCode.code === 404) {",
							"    tests[\"Not Found. Check if you made correct request\"] = false;",
							"} else if (responseCode.code === 422) {",
							"    tests[\"he instance is not valid\"] = false;",
							"} else {",
							"    tests[\"Something went wrong. Check response body\"] = false;",
							"}",
							"",
							"pm.test(\"ID is correct\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.address.id).to.eql(pm.environment.get(\"ID\"));",
							"});",
							"",
							"",
							"pm.test(\"COMPANY is correct\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.address.company).to.eql(pm.environment.get(\"COMPANY\"));",
							"});",
							"",
							"",
							"pm.test(\"Status code is 200 \", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"",
							"pm.test(\"Response assertions\", function () {",
							"    pm.response.to.have.status(200);",
							"    pm.response.to.be.ok;",
							"    pm.response.to.to.be.json;",
							"});",
							"",
							"pm.test(\"Check isDefaultAddress\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.isDefaultAddress).to.eql(true);",
							"",
							"});",
							"",
							"",
							"pm.test(\"Check PhoneNumber\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.address.phoneNumber).to.eql(\"5555555555\");",
							"",
							"});",
							"",
							"",
							"pm.test(\"Check ZipCode\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.address.zipCode).to.eql(\"90012\");",
							"",
							"});",
							"",
							"pm.test(\"Check FirstName\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.address.fullName.firstName).to.eql(\"Kristina\");",
							"",
							"});",
							"",
							"",
							"",
							"pm.test(\"FN is correct\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.address.fullName.firstName).to.eql(\"Kristina\")",
							"    pm.expect(jsonData.address.fullName.lastName).to.eql(\"Ivanova\");",
							"    pm.expect(jsonData.address.country).to.eql(\"USA\");",
							"    pm.expect(jsonData.address.subdivision).to.eql(\"CA\");",
							"    pm.expect(jsonData.address.city).to.eql(\"Los Angeles\");",
							"    pm.expect(jsonData.address.zipCode).to.eql(\"90012\");",
							"    pm.expect(jsonData.address.phoneNumber).to.eql(\"5555555555\");",
							"    pm.expect(jsonData.address.addressLine1).to.eql(\"123 South Main Street\");",
							"   ",
							"});",
							"",
							"pm.test(\"Response body should be in the correct format\", function () {",
							"    let jsonData = pm.response.json();",
							"    pm.expect(jsonData.address).to.be.a('object');",
							"    pm.expect(jsonData.address.id).to.be.a('string');",
							"    pm.expect(jsonData.address.fullName).to.be.a('object');",
							"    pm.expect(jsonData.address.fullName.firstName).to.be.a('string');",
							"    pm.expect(jsonData.address.fullName.lastName).to.be.a('string');",
							"    pm.expect(jsonData.address.country).to.be.a('string');",
							"    pm.expect(jsonData.address.subdivision).to.be.a('string');",
							"    pm.expect(jsonData.address.city).to.be.a('string');",
							"    pm.expect(jsonData.address.zipCode).to.be.a('string');",
							"    pm.expect(jsonData.address.phoneNumber).to.be.a('string');",
							"    pm.expect(jsonData.address.addressLine1).to.be.a('string');",
							"    pm.expect(jsonData.isDefaultAddress).to.be.a('boolean');",
							"});",
							"",
							"",
							"pm.test(\"Response time is less than 1000ms\", function () {",
							"    pm.expect(pm.response.responseTime).to.be.below(1000);",
							"});",
							"",
							"",
							"pm.test(\"Response size is less than 2000ms\", function () {",
							"    pm.expect(pm.response.responseSize).to.be.below(2000);",
							"});",
							"",
							"",
							"pm.test(\"Header is correct\", function () {",
							"    pm.response.to.have.header(\"Content-Type\", \"application/json;charset=utf-8\");",
							"    pm.response.to.have.header (\"Server\", \"Pepyaka/1.19.10\");",
							"    pm.response.to.have.header (\"Connection\", \"keep-alive\");",
							"    ",
							"});",
							"    ",
							"",
							"pm.test(\"Response should be okay to process\", function () {",
							"    pm.response.to.not.be.error;",
							"    pm.response.to.be.withBody;",
							"    pm.response.to.not.have.jsonBody(\"error\");",
							"});",
							"",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://addresses.wixapps.net/_api/addresses-web/v1/addresses/?id={{ID}}",
					"protocol": "https",
					"host": [
						"addresses",
						"wixapps",
						"net"
					],
					"path": [
						"_api",
						"addresses-web",
						"v1",
						"addresses",
						""
					],
					"query": [
						{
							"key": "id",
							"value": "{{ID}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Modifi existing address",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"if(responseCode.code === 200) {",
							"    tests[\"Backend is available, response code is 200\"] = true;",
							"} else if (responseCode.code === 401) {",
							"    tests[\"Not authorised, check access token or Log in\"] = false;",
							"} else if (responseCode.code === 403) {",
							"    tests[\"Forbiden\"] = false;",
							"} else if (responseCode.code === 404) {",
							"    tests[\"Not Found. Check if you made correct request\"] = false;",
							"} else if (responseCode.code === 422) {",
							"    tests[\"he instance is not valid\"] = false;",
							"} else {",
							"    tests[\"Something went wrong. Check response body\"] = false;",
							"}",
							"",
							"",
							"pm.test(\"Response Time is less than 1000ms\", function () {",
							"    pm.expect(pm.response.responseTime).to.be.below(1000);",
							"});",
							"",
							"tests['Response Time is Acceptable'] = responseTime < 1000;",
							"",
							"pm.test(\"Response size is less than 2000ms\", function () {",
							"    pm.expect(pm.response.responseSize).to.be.below(2000);",
							"});",
							"",
							"",
							"pm.test(\"Header is correct\", function () {",
							"    pm.response.to.have.header(\"Content-Type\", \"application/json;charset=utf-8\");",
							"    pm.response.to.have.header (\"Content-Length\", \"2\");",
							"    pm.response.to.have.header (\"Connection\", \"keep-alive\");",
							"    pm.response.to.have.header (\"Server\", \"Pepyaka/1.19.10\");",
							"});",
							"",
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"    pm.response.to.be.ok;",
							"    pm.response.to.be.json;",
							"",
							"});",
							"",
							"pm.test(\"Response should be okay to process\", function () {",
							"    pm.response.to.not.be.error;",
							"    pm.response.to.be.withBody;",
							"    pm.response.to.be.json;",
							"    pm.response.to.not.have.jsonBody(\"error\");",
							"",
							"});",
							"",
							"",
							"pm.test(\"Body matches string {}\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"{}\");",
							"});",
							"",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"pm.environment.unset(\"COMPANY\");",
							"pm.environment.set(\"COMPANY\", \"Google-\" + new Date ().getTime());"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PATCH",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"address\": {\n        \"id\": \"{{ID}}\",\n        \"fullName\": {\n            \"firstName\": \"Sergey\",\n            \"lastName\": \"Efremov\"\n        },\n        \"company\": \"{{COMPANY}}\",\n        \"taxInfo\": {\n            \"id\": null,\n            \"type\": null\n        },\n        \"addressLine1\": \"888 Golg Dr\",\n        \"addressLine2\": \"Apt 777\",\n        \"street\": {\n            \"name\": null,\n            \"number\": null\n        },\n        \"city\": \"Los Angeles\",\n        \"country\": \"USA\",\n        \"subdivision\": \"CA\",\n        \"zipCode\": \"90029\",\n        \"phoneNumber\": \"2222222222\",\n        \"location\": {\n            \"latitude\": 34.0930087,\n            \"longitude\": -118.2815088\n        }\n    },\n    \"setAsDefault\": false,\n    \"fieldMask\": {\n        \"paths\": [\n            \"fullName.firstName\",\n            \"fullName.lastName\",\n            \"company\",\n            \"addressLine1\",\n            \"addressLine2\",\n            \"city\",\n            \"country\",\n            \"subdivision\",\n            \"zipCode\",\n            \"phoneNumber\",\n            \"location.latitude\",\n            \"location.longitude\",\n            \"setAsDefault\"\n        ]\n    }\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://addresses.wixapps.net/_api/addresses-web/v1/addresses/?id={{ID}}",
					"protocol": "https",
					"host": [
						"addresses",
						"wixapps",
						"net"
					],
					"path": [
						"_api",
						"addresses-web",
						"v1",
						"addresses",
						""
					],
					"query": [
						{
							"key": "id",
							"value": "{{ID}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Specific Updated address",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"if(responseCode.code === 200) {",
							"    tests[\"Backend is available, response code is 200\"] = true;",
							"} else if (responseCode.code === 401) {",
							"    tests[\"Not authorised, check access token or Log in\"] = false;",
							"} else if (responseCode.code === 403) {",
							"    tests[\"Forbiden\"] = false;",
							"} else if (responseCode.code === 404) {",
							"    tests[\"Not Found. Check if you made correct request\"] = false;",
							"} else if (responseCode.code === 422) {",
							"    tests[\"he instance is not valid\"] = false;",
							"} else {",
							"    tests[\"Something went wrong. Check response body\"] = false;",
							"}",
							"",
							"",
							"",
							"pm.test(\"Status code is 200 \", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"",
							"pm.test(\"Response assertions\", function () {",
							"    pm.response.to.have.status(200);",
							"    pm.response.to.be.ok;",
							"    pm.response.to.to.be.json;",
							"});",
							"",
							"pm.test(\"Check isDefaultAddress\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.isDefaultAddress).to.eql(false);",
							"",
							"});",
							"",
							"",
							"pm.test(\"Check PhoneNumber\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.address.phoneNumber).to.eql(\"2222222222\");",
							"",
							"});",
							"",
							"",
							"pm.test(\"Check ZipCode\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.address.zipCode).to.eql(\"90029\");",
							"",
							"});",
							"",
							"pm.test(\"Check FirstName\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.address.fullName.firstName).to.eql(\"Sergey\");",
							"",
							"});",
							"",
							"",
							"",
							"pm.test(\"FN is correct\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.address.fullName.firstName).to.eql(\"Sergey\")",
							"    pm.expect(jsonData.address.fullName.lastName).to.eql(\"Efremov\");",
							"    pm.expect(jsonData.address.country).to.eql(\"USA\");",
							"    pm.expect(jsonData.address.subdivision).to.eql(\"CA\");",
							"    pm.expect(jsonData.address.city).to.eql(\"Los Angeles\");",
							"    pm.expect(jsonData.address.zipCode).to.eql(\"90029\");",
							"    pm.expect(jsonData.address.phoneNumber).to.eql(\"2222222222\");",
							"    pm.expect(jsonData.address.addressLine1).to.eql(\"888 Golg Dr\");",
							"   ",
							"});",
							"",
							"pm.test(\"Response body should be in the correct format\", function () {",
							"    let jsonData = pm.response.json();",
							"    pm.expect(jsonData.address).to.be.a('object');",
							"    pm.expect(jsonData.address.id).to.be.a('string');",
							"    pm.expect(jsonData.address.fullName).to.be.a('object');",
							"    pm.expect(jsonData.address.fullName.firstName).to.be.a('string');",
							"    pm.expect(jsonData.address.fullName.lastName).to.be.a('string');",
							"    pm.expect(jsonData.address.country).to.be.a('string');",
							"    pm.expect(jsonData.address.subdivision).to.be.a('string');",
							"    pm.expect(jsonData.address.city).to.be.a('string');",
							"    pm.expect(jsonData.address.zipCode).to.be.a('string');",
							"    pm.expect(jsonData.address.phoneNumber).to.be.a('string');",
							"    pm.expect(jsonData.address.company).to.be.a('string');",
							"    pm.expect(jsonData.address.addressLine1).to.be.a('string');",
							"    pm.expect(jsonData.isDefaultAddress).to.be.a('boolean');",
							"});",
							"",
							"",
							"pm.test(\"Response time is less than 1000ms\", function () {",
							"    pm.expect(pm.response.responseTime).to.be.below(1000);",
							"});",
							"",
							"",
							"pm.test(\"Response size is less than 2000ms\", function () {",
							"    pm.expect(pm.response.responseSize).to.be.below(2000);",
							"});",
							"",
							"",
							"pm.test(\"Header is correct\", function () {",
							"    pm.response.to.have.header(\"Content-Type\", \"application/json;charset=utf-8\");",
							"    pm.response.to.have.header (\"Content-Length\", \"385\");",
							"    pm.response.to.have.header (\"Connection\", \"keep-alive\");",
							"",
							"});",
							"    ",
							"",
							"pm.test(\"Response should be okay to process\", function () {",
							"    pm.response.to.not.be.error;",
							"    pm.response.to.be.withBody;",
							"    pm.response.to.not.have.jsonBody(\"error\");",
							"});",
							"",
							"pm.test(\"Entire response is correct\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.address.id).to.eql(pm.environment.get(\"ID\"));",
							"    pm.expect(jsonData.address.company).to.eql(pm.environment.get(\"COMPANY\"));",
							"",
							"});",
							"",
							"pm.test(\"COMPANY is correct\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.address.company).to.eql(pm.environment.get(\"COMPANY\"));",
							"});",
							"",
							"pm.test(\"ID is correct\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.address.id).to.eql(pm.environment.get(\"ID\"));",
							"});",
							"",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://addresses.wixapps.net/_api/addresses-web/v1/addresses/?id={{ID}}",
					"protocol": "https",
					"host": [
						"addresses",
						"wixapps",
						"net"
					],
					"path": [
						"_api",
						"addresses-web",
						"v1",
						"addresses",
						""
					],
					"query": [
						{
							"key": "id",
							"value": "{{ID}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete the address",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"if(responseCode.code === 200) {",
							"    tests[\"Backend is available, response code is 200\"] = true;",
							"} else if (responseCode.code === 401) {",
							"    tests[\"Not authorised, check access token or Log in\"] = false;",
							"} else if (responseCode.code === 400) {",
							"    tests[\"Forbiden\"] = true;",
							"} else if (responseCode.code === 403) {",
							"    tests[\"Not Found. Check if you made correct request\"] = false;",
							"} else if (responseCode.code === 404) {",
							"    tests[\"he instance is not valid\"] = false;",
							"} else {",
							"    tests[\"Something went wrong. Check response body\"] = false;",
							"}",
							"",
							"",
							"",
							"pm.test(\"Response Time is less than 1000ms\", function () {",
							"    pm.expect(pm.response.responseTime).to.be.below(1000);",
							"",
							"});",
							"",
							"",
							"pm.test(\"Response size is less than 2000ms\", function () {",
							"    pm.expect(pm.response.responseSize).to.be.below(2000);",
							"});",
							"",
							"",
							"",
							"pm.test(\"Header is correct\", function () {",
							"    pm.response.to.have.header(\"Content-Type\", \"application/json;charset=utf-8\");",
							"    pm.response.to.have.header (\"Content-Length\", \"2\");",
							"    pm.response.to.have.header (\"Connection\", \"keep-alive\");",
							"    pm.response.to.have.header (\"Server\", \"Pepyaka/1.19.10\");",
							"",
							"});",
							"",
							"pm.test(\"Order has been deleted, OK\", function () {",
							"    pm.response.to.be.withBody;",
							"    pm.response.to.be.json;",
							"    pm.response.to.have.jsonBody ({});",
							"});",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "https://addresses.wixapps.net/_api/addresses-web/v1/addresses/?id={{ID}}",
					"protocol": "https",
					"host": [
						"addresses",
						"wixapps",
						"net"
					],
					"path": [
						"_api",
						"addresses-web",
						"v1",
						"addresses",
						""
					],
					"query": [
						{
							"key": "id",
							"value": "{{ID}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Read Specific Deleted  addresses",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"if(responseCode.code === 200) {",
							"    tests[\"Backend is available, response code is 200\"] = false;",
							"} else if (responseCode.code === 400) {",
							"    tests[\"Not authorised, check access token or Log in\"] = true;",
							"} else if (responseCode.code === 403) {",
							"    tests[\"Forbiden\"] = false;",
							"} else if (responseCode.code === 404) {",
							"    tests[\"Not Found. Check if you made correct request\"] = false;",
							"} else if (responseCode.code === 422) {",
							"    tests[\"he instance is not valid\"] = false;",
							"} else {",
							"    tests[\"Something went wrong. Check response body\"] = false;",
							"}",
							"pm.test(\"ID is in response\", function () {",
							"    pm.expect(pm.response.text()).to.include(pm.environment.get(\"ID\"));",
							"});",
							"",
							"",
							"pm.test(\"Header is correct\", function () {",
							"    pm.response.to.have.header(\"Content-Type\", \"application/json;charset=utf-8\");",
							"    pm.response.to.have.header (\"Content-Length\", \"191\");",
							"    pm.response.to.have.header (\"Connection\", \"keep-alive\");",
							"",
							"});",
							"",
							"pm.test(\"Response time is less than 1000ms\", function () {",
							"    pm.expect(pm.response.responseTime).to.be.below(1000);",
							"});",
							"",
							"",
							"pm.test(\"Response size is less than 2000ms\", function () {",
							"    pm.expect(pm.response.responseSize).to.be.below(2000);",
							"});",
							"",
							"",
							"pm.test(\"Details is correct\", function () {",
							"   const jsonData = pm.response.json();",
							"pm.expect(jsonData.details.cant_find).to.eql('address_id: '+ pm.environment.get(\"ID\")); ",
							"});",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://addresses.wixapps.net/_api/addresses-web/v1/addresses/?id={{ID}}",
					"protocol": "https",
					"host": [
						"addresses",
						"wixapps",
						"net"
					],
					"path": [
						"_api",
						"addresses-web",
						"v1",
						"addresses",
						""
					],
					"query": [
						{
							"key": "id",
							"value": "{{ID}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "DELETE address 2nd  time",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"if(responseCode.code === 200) {",
							"    tests[\"Backend is available, response code is 200\"] = true;",
							"} else if (responseCode.code === 401) {",
							"    tests[\"Not authorised, check access token or Log in\"] = false;",
							"} else if (responseCode.code === 400) {",
							"    tests[\"Forbiden\"] = true;",
							"} else if (responseCode.code === 403) {",
							"    tests[\"Not Found. Check if you made correct request\"] = false;",
							"} else if (responseCode.code === 404) {",
							"    tests[\"he instance is not valid\"] = false;",
							"} else {",
							"    tests[\"Something went wrong. Check response body\"] = false;",
							"}",
							"",
							"",
							"",
							"pm.test(\"Response Time is less than 1000ms\", function () {",
							"    pm.expect(pm.response.responseTime).to.be.below(1000);",
							"",
							"});",
							"",
							"",
							"pm.test(\"Response size is less than 2000ms\", function () {",
							"    pm.expect(pm.response.responseSize).to.be.below(2000);",
							"});",
							"",
							"",
							"",
							"pm.test(\"Header is correct\", function () {",
							"    pm.response.to.have.header(\"Content-Type\", \"application/json;charset=utf-8\");",
							"    pm.response.to.have.header (\"Content-Length\", \"191\");",
							"    pm.response.to.have.header (\"Connection\", \"keep-alive\");",
							"    pm.response.to.have.header (\"Server\", \"Pepyaka/1.19.10\");",
							"",
							"});",
							"",
							"pm.test(\"Order has been deleted, OK\", function () {",
							"    pm.response.to.be.withBody;",
							"    pm.response.to.be.json;",
							"    pm.response.to.have.jsonBody ({});",
							"});",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "https://addresses.wixapps.net/_api/addresses-web/v1/addresses/?id={{ID}}",
					"protocol": "https",
					"host": [
						"addresses",
						"wixapps",
						"net"
					],
					"path": [
						"_api",
						"addresses-web",
						"v1",
						"addresses",
						""
					],
					"query": [
						{
							"key": "id",
							"value": "{{ID}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Make Deleted address by defalt",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"",
							"",
							"switch (responseCode.code) {",
							"    case 200:",
							"        tests[\"200 ok. The request has succeeded\"] = false;",
							"        break;",
							"    case 404:",
							"        tests[\"404 Not found\"] = false;",
							"        break;",
							"    case 400:",
							"        tests[\"400 Bad Request\"] = true;",
							"        break;",
							"    case 401:",
							"        tests[\"401 BUnauthorized\"] = false;",
							"        break;",
							"    case 500:",
							"        tests[\"500 Internal Server Error\"] = false;",
							"        break;",
							"    case 503:",
							"        tests[\"503 Server unavailable\"] = false;",
							"        break;",
							"    case 502:",
							"        tests[\"502 bad gateway\"] = false;",
							"        break;",
							"    case 599:",
							"        tests[\"599 Network connect timeout error\"] = false;",
							"        break;",
							"    case 408:",
							"        tests[\"408 Request is timeout\"] = false;",
							"        break;",
							"    default:",
							"        tests[\"Sorry, we are out of\" + responseCode.code] = false;",
							"}",
							"",
							"",
							"pm.test(\"Response Time is less than 1000ms\", function () {",
							"    pm.expect(pm.response.responseTime).to.be.below(1000);",
							"",
							"});",
							"",
							"",
							"pm.test(\"Response size is less than 2000ms\", function () {",
							"    pm.expect(pm.response.responseSize).to.be.below(2000);",
							"});",
							"",
							"pm.test(\"Header is correct\", function () {",
							"    pm.response.to.have.header(\"Content-Type\", \"application/json;charset=utf-8\");",
							"    pm.response.to.have.header (\"Content-Length\", \"191\");",
							"    pm.response.to.have.header (\"Connection\", \"keep-alive\");",
							"    pm.response.to.have.header (\"Server\", \"Pepyaka/1.19.10\");",
							"",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"id\": \"{{ID}}\"\n}"
				},
				"url": {
					"raw": "https://addresses.wixapps.net/_api/addresses-web/v1/addresses/default",
					"protocol": "https",
					"host": [
						"addresses",
						"wixapps",
						"net"
					],
					"path": [
						"_api",
						"addresses-web",
						"v1",
						"addresses",
						"default"
					]
				}
			},
			"response": []
		},
		{
			"name": "Modify Deleted  address by default",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"if(responseCode.code === 200) {",
							"    tests[\"Backend is available, response code is 200\"] = false;",
							"} else if (responseCode.code === 400) {",
							"    tests[\"Not authorised, check access token or Log in\"] = false;",
							"} else if (responseCode.code === 403) {",
							"    tests[\"Forbiden\"] = false;",
							"} else if (responseCode.code === 404) {",
							"    tests[\"Not Found. Check if you made correct request\"] = false;",
							"} else if (responseCode.code === 422) {",
							"    tests[\"he instance is not valid\"] = false;",
							"} else {",
							"    tests[\"Something went wrong. Check response body\"] = true;",
							"}",
							"",
							"",
							"",
							"",
							"pm.test(\"Header is correct\", function () {",
							"    pm.response.to.have.header(\"Content-Type\", \"application/json;charset=utf-8\");",
							"    pm.response.to.have.header (\"Content-Length\", \"83\");",
							"    pm.response.to.have.header (\"Connection\", \"keep-alive\");",
							"",
							"});",
							"",
							"pm.test(\"Response time is less than 1000ms\", function () {",
							"    pm.expect(pm.response.responseTime).to.be.below(1000);",
							"});",
							"",
							"",
							"pm.test(\"Response size is less than 2000ms\", function () {",
							"    pm.expect(pm.response.responseSize).to.be.below(2000);",
							"});",
							"",
							"",
							"",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PATCH",
				"header": [],
				"url": {
					"raw": "https://addresses.wixapps.net/_api/addresses-web/v1/addresses/?id={{ID}}",
					"protocol": "https",
					"host": [
						"addresses",
						"wixapps",
						"net"
					],
					"path": [
						"_api",
						"addresses-web",
						"v1",
						"addresses",
						""
					],
					"query": [
						{
							"key": "id",
							"value": "{{ID}}"
						}
					]
				}
			},
			"response": []
		}
	],
	"auth": {
		"type": "apikey",
		"apikey": [
			{
				"key": "value",
				"value": "WDTlQHxMTZMrVAwvxLZYxIw2EqdcMMdlTnmUQWm663Y.eyJpbnN0YW5jZUlkIjoiZjQ2Y2Q1MDItZjcyZi00NGY3LTk2MzgtNWRhMWRlYjBiNGU3IiwiYXBwRGVmSWQiOiIxNTA1Yjc3NS1lODg1LWViMWItYjY2NS0xZTQ4NWQ5YmY5MGUiLCJtZXRhU2l0ZUlkIjoiMjhiNzkzZDYtNTQyNC00MDU4LTgwNDktMDI2YTRkYjAyODJmIiwic2lnbkRhdGUiOiIyMDIzLTEwLTAxVDIwOjMyOjE3LjI3NloiLCJ1aWQiOiJhMjI0YmI4OC00Zjg2LTQxMDQtOWY0NS1iNjVkOWQwZWRhZjciLCJkZW1vTW9kZSI6ZmFsc2UsImFpZCI6ImZlZGZhYTRiLWQ1YzMtNDk3Mi1hODA1LTc4M2MxYTNmMzczZiIsImJpVG9rZW4iOiJkY2RiNDZkNC1hMzBiLTA0YWYtMTY3MS01ZmNiOTMwMDljYzgiLCJzaXRlT3duZXJJZCI6ImY5MTRmMTFjLWFhYjMtNDUyNy04ZDRlLWJhYjc2MjE0M2E2MCIsImV4cGlyYXRpb25EYXRlIjoiMjAyMy0xMC0wMlQwMDozMjoxNy4yNzZaIiwiaGFzVXNlclJvbGUiOmZhbHNlfQ",
				"type": "string"
			},
			{
				"key": "in",
				"value": "header",
				"type": "string"
			},
			{
				"key": "key",
				"value": "Authorization",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	]
}